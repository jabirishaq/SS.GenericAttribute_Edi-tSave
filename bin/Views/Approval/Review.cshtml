@model SmartStore.Web.Models.Checkout.CheckoutModel
@using SmartStore.Web.Models.Checkout;
@using SmartStore.Web.Models.Common;
@{
    Layout = "_Checkout";
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    Html.AddBodyCssClass("no-offcanvas-cart");
}


<style>
    .edit-billing-address-icon {
        position: relative;
        left: -57px;
        top: -31px;
        float: right;
    }
</style>
@section orderProgress{
    @*@{ Html.RenderAction("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Checkout }); }*@
}

@if (Model.CartEmpty)
{
    <div class="order-summary-content cart-content" data-empty-text=@T("ShoppingCart.CartIsEmpty").JsText>

        <div class="alert alert-warning fade show">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    </div>
    return;
}
 <div id="sectionShopingCart" style="margin-bottom:40px;">
        @Html.Action("CheckoutCart", "ShoppingCart")
    </div>
<form action="Checkout" method="post">
    <div id="sectionBillingAddress">
        @Html.Action("BillingAddress")
    </div>
    <div id="sectionShippingAddress">
        @Html.Action("ShippingAddress")
    </div>
    <div id="sectionShippingMethod">
        @Html.Action("ShippingMethod")
    </div>
    <div id="sectionPaymentMethod">
        @Html.Action("PaymentMethod")
    </div>
   
    <div class="buttons row">
        <div class="col-md-2">
            <a class="btn btn-secondary btn-lg" href="/">
                <i class="fa fa-angle-left"></i>
                <span>@T("Common.Back")</span>
            </a>
        </div>
        <div class="offset-8 col-md-2 text-right">

            <button type="submit" class="btn btn-warning btn-lg payment-method-next-step-button">
                <span>Save</span>
                <i class="fa fa-angle-right"></i>
            </button>
        </div>
    </div>
</form>

@{Html.SmartStore().Window()
                        .Name("addAddressModal")
                        .Title("Add new address")
                        .Size(WindowSize.Large)
                        .Content(@<text>
    @using (Ajax.BeginForm("BillingAddress", new AjaxOptions() { UpdateTargetId = "sectionBillingAddress", OnSuccess = "billingAddressCreate" }))
    {
        <div class="enter-address-body">
            @{
                var dataDictAddress = new ViewDataDictionary();
                dataDictAddress["breakpoint"] = "sm";
                //Merge ModelState (required for validation)
                dataDictAddress.ModelState.Merge(ViewData.ModelState);
                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "NewAddress";
                Html.RenderPartial("_CreateOrUpdateAddress", Model.BillingAddressModel.NewAddress, dataDictAddress);
            }
        </div>
        <input type="submit" name="nextstep" id="nextstepa" class="d-none" />

    }
                        </text>)
.FooterContent(@<text>
    <a href="#" class="btn btn-secondary btn-flat" data-dismiss="modal">
        <span>@T("Common.Cancel")</span>
    </a>
    <button id="uploadpackagesubmit" type="submit" class="btn btn-primary" onclick="$('#nextstepa').trigger('click');return false;">
        <span>Create</span>
    </button>
</text>)
.Render();
}
<script>

    function showThrobber(selector) {
        var cnt = $(selector);
			var throbber = cnt.data('throbber');
			if (!throbber) {
				throbber = cnt.throbber({ white: true, small: true, message: '', show: false, speed: 0 }).data('throbber');
			}

			throbber.show();
		}

    function hideThrobber(selector) {
        var cnt = $(selector);
			_.delay(function () {
				if (cnt.data("throbber"))
					cnt.data("throbber").hide();
			}, 100);
    }
        $(document).on('click','#saveBillingAddress', CreateOrUpdateAddress);
    var editBilling = function (e) {
            if (e.currentTarget.className=="edit-billing-address-icon billing-address") {
                //Billing Address
                //showThrobber(".enter-address-body.billing-address");
                showThrobber('#sectionBillingAddress');
                var id = $('#billingAddressDropDown').val();
                $('.enter-address-body.billing-address').removeClass('d-none');
                $.ajax('@Url.Action("CreateOrEditAddress",new { id="-1"})'.replace('-1', id), {
                    success: function (response) {
                        hideThrobber('#sectionBillingAddress');
                        $('.enter-address-body.billing-address').html(response);
                    }
                });
            } else {
                //Shipping Address
                showThrobber("#sectionShippingAddress");
                var id = $('#shippingAddressDropDown').val();
                $('.enter-address-body.shipping-address').removeClass('d-none');
                $.ajax('@Url.Action("CreateOrEditAddress",new { id="-1"})'.replace('-1', id), {
                    success: function (response) {
                        hideThrobber('#sectionShippingAddress');
                        $('.enter-address-body.shipping-address').html(response);
                    }
                });


            }

        }
    function CreateOrUpdateAddress(e) {
        debugger
        var isBillingAddress = $(e.currentTarget.parentElement.parentElement).hasClass('billing-address');
        var bodySelector = '.enter-address-body';
        if (isBillingAddress) {
            bodySelector = bodySelector + '.billing-address';
            var dropDownSelector = '#billingAddressDropDown';
            showThrobber('#sectionBillingAddress');
        }
        else {
            bodySelector = bodySelector + '.shipping-address';
            var dropDownSelector = '#shippingAddressDropDown';
            showThrobber('#sectionShippingAddress');
        }
        //showThrobber(bodySelector);

        var data = formToJSON(bodySelector, '');
            $.ajax({
                cache: false,
                type: 'post',
                url:  isBillingAddress ? '@Url.Action("BillingAddress")' : '@Url.Action("ShippingAddress")',
                data: data,
                success: function (result) {
                    //hideThrobber(bodySelector);
                    debugger
                    if (result.success) {

                        //Update billingAddress dropdown
                        var item = result.Content.NewAddress;
                        // Set the value, creating a new option if necessary
                        if ($('#billingAddressDropDown').find("option[value='" + item.Id + "']").length) {
                            $('#billingAddressDropDown').find("option[value='" + item.Id + "']").text(item.Address1);
                            $('#billingAddressDropDown').select2('destroy').select2();
                            //Update address in ShippingAddress
                            $('#shippingAddressDropDown').find("option[value='" + item.Id + "']").text(item.Address1);
                            $('#shippingAddressDropDown').select2('destroy').select2();
                        } else {
                            // Create a DOM Option and pre-select by default
                            $('#billingAddressDropDown')
                                .append(new Option(item.Address1, item.Id, true, false))
                                .trigger('change');
                            //Add for shipping
                            $('#shippingAddressDropDown')
                                .append(new Option(item.Address1, item.Id, true, false))
                                .trigger('change');
                            //Select value
                            $(dropDownSelector).val(item.Id).trigger('change');
                        }
                        $('.enter-address-body').addClass('d-none');
                    } else {
                        //EventBroker.publish("message", { title: data.message, type: "error" });
                        $(bodySelector).html(result);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    if (isBillingAddress)
                            hideThrobber('#sectionBillingAddress');
                        else
                            hideThrobber('#sectionShippingAddress');
						console.log(thrownError);
                    //lcpCheckout.hideThrobber('#shopping-single-cart-page');
                }, complete: function () {
                    if (isBillingAddress)
                            hideThrobber('#sectionBillingAddress');
                        else
                     hideThrobber('#sectionShippingAddress');
                }
            });
        }
    function updatePaymentInformation() {
            $.ajax('@Url.Action("PaymentMethod", "Approval")', {
                method:'get',
                success: function (response) {
                    $('#sectionPaymentMethod').html(response);
                }
            });
    }
    function formToJSON(selector, prefix) {
		var form = {};
		$(selector).find(':input[name]:enabled').each(function () {
			var self = $(this);
			var name = self.attr('name').replace(prefix, '');
			if (form[name]) {
				form[name] = /*form[name] + ',' + */self.val();
			}
			else {
				form[name] = self.val();
			}
		});

		return form;
    }
    function billingAddressCreate() {
        $('#sectionShippingAddress').load('@Url.Action("ShippingAddress")');
        $('#addAddressModal').modal('hide');
    }
    function shippingAddressCreated() {
        $('#sectionBillingAddress').load('@Url.Action("BillingAddress")');
        $('#addShippingAddressModal').modal('hide');
    }
</script>
@{Html.SmartStore().Window()
                        .Name("addShippingAddressModal")
                        .Title("Add new address")
                        .Size(WindowSize.Large)
                        .Content(@<text>
    @using (Ajax.BeginForm("ShippingAddress", new AjaxOptions() { UpdateTargetId = "sectionShippingAddress", OnSuccess = "shippingAddressCreated" }))
    {
        <div class="enter-address-body">
            @{
                var dataDictAddress = new ViewDataDictionary();
                dataDictAddress["breakpoint"] = "sm";
                //Merge ModelState (required for validation)
                dataDictAddress.ModelState.Merge(ViewData.ModelState);
                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "NewAddress";
                Html.RenderPartial("_CreateOrUpdateAddress", Model.BillingAddressModel.NewAddress, dataDictAddress);
            }
        </div>
        <input type="submit" name="nextstep" id="nextstepa" class="d-none" />

    }
                        </text>)
.FooterContent(@<text>
    <a href="#" class="btn btn-secondary btn-flat" data-dismiss="modal">
        <span>@T("Common.Cancel")</span>
    </a>
    <button id="uploadpackagesubmit" type="submit" class="btn btn-primary" onclick="$('#nextstepa').trigger('click');return false;">
        <span>Create</span>
    </button>
</text>)
.Render();
}

