@model SmartStore.Admin.Models.Approvals.ApprovalModel

@using SmartStore.Core.Domain.Approvals;
@using Telerik.Web.Mvc.UI;
@using SmartStore.Web.Framework.UI;

@Html.AntiForgeryToken()
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.SmartStore().TabStrip().Name("approval-edit").Style(TabsStyle.Material).Items(x =>
{
    x.Add().Text("Approval").Content(TabInfo()).Selected(true);
    if (Model.Id > 0)
    {
        x.Add().Text("Approval Usage History").Content(TabHistory());
    }

    EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "approval-edit", this.Html, this.Model));
})

@{
    Html.AddCssFileParts(true, Url.Content("~/Administration/Content/multiselect/bootstrap-multiselect.css"));
    Html.AddScriptParts(true, Url.Content("~/Administration//Scripts/multiselect/bootstrap-multiselect.js"));
}

@helper TabInfo()
{
    <style>
        td.approval-required-available-roles .btn {
            text-transform: none;
        }

        #divAvailableApprovalRequiredRoles label {
            justify-content: unset;
            height: auto;
            display: inline-table;
        }

        #divAvailableApproverRoles label {
            justify-content: unset;
            height: auto;
            display: inline-table;
        }
    </style>

    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Name)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                <div class="ctl-label"><label>Notification</label></div>
            </td>
            <td class="adminData">
                <div class="form-check">
                    @Html.RadioButtonFor(model => model.NotificationUseEmailApprovalAddress, "true", new { id = "EmailApprovalAddress", @class = "form-check-input" })
                    @Html.Label("EmailApprovalAddress", "Email Approval Address", new { @class = "form-check-label" })
                </div>
                <div class="form-check">
                    @Html.RadioButtonFor(model => model.NotificationUseEmailApprovalAddress, "false", new { id = "EmailAddress", @class = "form-check-input" })
                    @Html.Label("EmailAddress", "Email Address", new { @class = "form-check-label" })
                </div>
            </td>
        </tr>
        <tr>
            <td class="adminTitle"></td>
            <td class="adminData">
                @Html.TextBoxFor(model => model.NotificationEmailAddresses, new { @id = "txtNotificationEmailAddresses" })
                @Html.ValidationMessageFor(model => model.NotificationEmailAddresses)
            </td>
        </tr>
        <tr>
            <td class="adminTitle"></td>
            <td class="adminData">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Reminder Email Every </span>
                    </div>
                    @Html.TextBoxFor(model => model.NotificationReminderEveryNumberOfDays)
                    <div class="input-group-append">
                        <span class="input-group-text"> Days</span>
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.NotificationReminderEveryNumberOfDays)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                <div class="ctl-label"><label>Expiration</label></div>
            </td>
            <td class="adminData">
                @Html.EnumDropDownListFor(model => model.ExpirationType, new { id = "ddlExpirationType" })
            </td>
        </tr>
        <tr>
            <td class="adminTitle"></td>
            <td class="adminData">
                <div class="input-group" id="divExpirationAfterNumberOfDays">
                    <div class="input-group-prepend">
                        <span class="input-group-text">After </span>
                    </div>
                    @Html.TextBoxFor(model => model.ExpirationAfterNumberOfDays, new { id = "txtExpirationAfterNumberOfDays" })
                    <div class="input-group-append">
                        <span class="input-group-text"> Days</span>
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.ExpirationAfterNumberOfDays)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                <div class="ctl-label"><label>Cutoff Time for Approval</label></div>
            </td>
            <td class="adminData">
                <div class="input-group date datetimepicker-group" id="cutoff-time-picker" data-date="@Model.CutoffTimeForApproval" data-target-input="nearest">
                    @Html.TextBoxFor(model => model.CutoffTimeForApproval, new { @class = "form-control datetimepicker-input", data_target = "#cutoff-time-picker", data_format = "LT" })
                    <div class="input-group-append input-group-addon" data-target="#cutoff-time-picker" data-toggle="datetimepicker">
                        <span class="input-group-text"><i class="fa fa-clock-o"></i></span>
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                <div class="ctl-label"><label>Approval Required</label></div>
            </td>
            <td class="adminData approval-required-available-roles">
                <div class="form-inline">
                    <label class="radio" for="ApprovalRequiredTypeAllOrders">
                        @Html.RadioButtonFor(model => model.ApprovalRequiredType, ApprovalRequiredType.AllOrders, new { id = "ApprovalRequiredTypeAllOrders", @class = "form-radio-input" })
                        All Orders
                    </label>
                    <span>&nbsp;&nbsp;&nbsp;</span>
                    <label class="radio" for="ApprovalRequiredTypeRoles">
                        @Html.RadioButtonFor(model => model.ApprovalRequiredType, ApprovalRequiredType.Roles, new { id = "ApprovalRequiredTypeRoles", @class = "form-radio-input" })
                        Roles
                    </label>
                    <div id="divAvailableApprovalRequiredRoles" style="width: 50%; display: inline;">
                        <span>&nbsp;&nbsp;&nbsp;</span>
                        @Html.ListBoxFor(model => model.ApprovalRequiredRoleIdsList, Model.AvailableApprovalRequiredRoles, new { id = "lstAvailableApprovalRequiredRoles", @class = "noskin" })
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.ApprovalRequiredRoleIdsList)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                <div class="ctl-label"><label>Approver</label></div>
            </td>
            <td class="adminData approval-required-available-roles">
                <div class="form-inline">
                    <div id="divAvailableApproverRoles" style="width: 50%; display: inline;">
                        <span>&nbsp;&nbsp;&nbsp;</span>
                        @Html.ListBoxFor(model => model.ApproverRoleIdsList, Model.AvailableApprovalRequiredRoles, new { id = "lstApproverRoles", @class = "noskin" })
                    </div>
                    <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>
                    <label class="checkbox" for="IsAllowLineItemEdit">
                        @Html.CheckBoxFor(model => model.IsAllowLineItemEdit, new { id = "IsAllowLineItemEdit", @class = "approver-roles-level-checkbox" })
                        <span>Allow Line Item Edit</span>
                    </label>
                </div>
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SelectedRuleSetIds)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.SelectedRuleSetIds)
                @Html.ValidationMessageFor(model => model.SelectedRuleSetIds)
            </td>
        </tr>
    </table>

    <script>
    $(document).ready(function () {
        if (isNotificationUseEmailAddressSelected()) {
            showNotificationEmailAddressesTextBox(false);
        } else {
            hideNotificationEmailAddressesTextBox();
        }

        if (isExpirationTypeNever()) {
            hideExpirationAfterNumberOfDays();
        } else {
            showExpirationAfterNumberOfDays();
        }

        if (isApprovalRequiredRolesRadioSelected()) {
            showAvailableApprovalRequiredRoles();
        } else {
            hideAvailableApprovalRequiredRoles(false);
        }

        $('input:radio[name=NotificationUseEmailApprovalAddress]').click(function () {
            if (isNotificationUseEmailAddressSelected()) {
                showNotificationEmailAddressesTextBox(true);
            } else {
                hideNotificationEmailAddressesTextBox();
            }
        });

        $('#ddlExpirationType').on('change', function () {
            if ($(this).val() == 0) {
                hideExpirationAfterNumberOfDays();
            } else {
                showExpirationAfterNumberOfDays();
            }
        });

        $('#cutoff-time-picker').datetimepicker({
            format: 'LT',
            useCurrent: false
        });

        $('input:radio[name=ApprovalRequiredType]').click(function () {
            if (isApprovalRequiredRolesRadioSelected()) {
                showAvailableApprovalRequiredRoles();
            } else {
                hideAvailableApprovalRequiredRoles(true);
            }
        });

        $('#lstAvailableApprovalRequiredRoles').multiselect({
            includeSelectAllOption: true,
            nonSelectedText: 'Select roles',
            numberDisplayed: 2,
            buttonWidth: '250px',
            maxHeight: 200
        });

        $('#lstApproverRoles').multiselect({
            includeSelectAllOption: true,
            nonSelectedText: 'Select roles',
            numberDisplayed: 2,
            buttonWidth: '250px',
            maxHeight: 200
        });
    });

    function showNotificationEmailAddressesTextBox(isClicked) {
        var textBox = $('#txtNotificationEmailAddresses');
        textBox.show();
        if (isClicked) {
            textBox.focus();
        }
    }

    function hideNotificationEmailAddressesTextBox() {
        var textBox = $('#txtNotificationEmailAddresses');
        textBox.val('');
        textBox.hide();
        textBox.siblings('span.field-validation-error').hide();
    }

    function isExpirationTypeNever() {
        return $('#ddlExpirationType').val() == 0;
    }

    function showExpirationAfterNumberOfDays() {
        $('#divExpirationAfterNumberOfDays').show();
    }

    function hideExpirationAfterNumberOfDays() {
        $('#txtExpirationAfterNumberOfDays').val("");
        var div = $('#divExpirationAfterNumberOfDays');
        div.hide();
        div.siblings('span.field-validation-error').hide();
    }

    function isNotificationUseEmailAddressSelected() {
        return $('input:radio[name=NotificationUseEmailApprovalAddress][value=false]').is(':checked');
    }

    function isApprovalRequiredRolesRadioSelected() {
        return $('input:radio[name=ApprovalRequiredType][value=@Html.Raw(ApprovalRequiredType.Roles)]').is(":checked");
    }

    function showAvailableApprovalRequiredRoles() {
        $('#divAvailableApprovalRequiredRoles').css('visibility', 'visible');
    }

    function hideAvailableApprovalRequiredRoles(isApprovalRequiredTypeChanged) {
        $('#divAvailableApprovalRequiredRoles').css('visibility', 'hidden');
        if (isApprovalRequiredTypeChanged) {
            $('#lstAvailableApprovalRequiredRoles').multiselect('deselectAll', false);
            $('#lstAvailableApprovalRequiredRoles').multiselect('updateButtonText');
        }
    }

    </script>
}


@helper TabHistory()
{
    @(Html.Telerik().Grid<SmartStore.Admin.Models.Approvals.ApprovalUsageHistoryModel>()
        .Name("usagehistory-grid")
        .DataKeys(x =>
        {
            x.Add(y => y.Id).RouteKey("Id");
            x.Add(y => y.ApprovalId).RouteKey("approvalId");
        })
        .Columns(columns =>
        {
            columns.Bound(x => x.StatusDisplayName).Title("Status").Width(200);
            columns.Bound(x => x.OrderId)
                .Width(100)
                .Template(x => Html.ActionLink("{0} (#{1})".FormatCurrentUI(T("Admin.Common.View").Text, x.OrderId), "Edit", "Order", new { id = x.OrderId }, new { }))
                .ClientTemplate("<a href=\"" + @Url.Content("~/Admin/Order/Edit/") + "<#= OrderId #>\">" + T("Admin.Common.View").Text + " (#<#= OrderId #>)</a>");
            columns.Bound(x => x.CreatedOn).Width(200);
            columns.Bound(x => x.UpdatedOn).Width(200);
            columns.Bound(x => x.SentReminderOn).Title("Sent Reminder On").Width(200);
            columns.Bound(x => x.AutoEscalatedOn).Title("Auto Escalated On").Width(200);
            //columns.Command(commands =>
            //{
            //    commands.Delete().Localize(T);
            //}).Width(100).Title(T("Admin.Common.Delete").Text);
        })
        .Pageable(settings => settings.PageSize(Model.GridPageSize).Position(GridPagerPosition.Both))
        .DataBinding(dataBinding =>
        {
            dataBinding.Ajax().Select("UsageHistoryList", "Approval", new { approvalId = Model.Id });
                //.Delete("UsageHistoryDelete", "Approval");
        })
        .PreserveGridState()
        .EnableCustomBinding(true))
}